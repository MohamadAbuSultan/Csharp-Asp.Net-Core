var builder = WebApplication.CreateBuilder(args);
/*
الويب أبليكيشن بيلدر هذا وظيفته يجهزلك البيئة 
اللي فيها الأدوات والخدمات اللي بيحتاجها التطبيق علشان يشتغل.

يعني سواء كنت عامل API، أو مشروع MVC،
في النهاية إنت بتبني ويب أبليكيشن، والويب أبليكيشن هذا علشان يشتغل صح
لازم يكون في شوية خدمات وأدوات "تشيل معاه"، زي السيرفر اللي هيستضيفه،
وملفات الإعدادات، وإيش البروجيكت محتاج عشان يبلش شغله صح.

عن طريق البيلدر، إنت بتحدد كل هالحاجات، من إعدادات وسيرفيسز وغيره.
بالتالي، الويب أبليكيشن بيلدر هذا هو بداية تكوين التطبيق،
ومن خلاله بنسجل الخدمات اللي هنحتاجها، وبنجهز كل شيء علشان نكمل البناء.
*/

// Add services to the container.
/*
 * هان احنا بنضيف السيرفيسز اللي التطبيق تبعنا بده يشتغل عليها.
*  يعني بكل بساطة، قاعدين بنجهز الحاجات
*  اللي الويب أبلكيشن بده يعتمد عليها لما يشتغل.
*/


builder.Services.AddControllers();
/*
 * هنا بنقول للبيلدر: ضيفلي الكنترولرز.
 * الكنترولرز هادول همّا اللي حيمسكوا الريكويستس
 * ويعالجوا الداتا ويرجعولك الريسبونس.
 * يعني بدونهم، الـ API مش حيكون شغال.
*/


// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
/*
 * هاد السطر بيضيف حاجه بتساعدنا نشوف الـ endpoints اللي موجودة في التطبيق.
 * يعني بتسهل علينا نعرف إيش الروابط (URLs) اللي نقدر نوصل من خلالها للـ APIs.
*/


builder.Services.AddSwaggerGen();
/*
 * سواجر هادي تولز بتخلينا نقدر نوثق الـ APIs تبعتنا بشكل حلو،
 * وتفتحها في واجهة رسومية (UI) حلوة تقدر تتفاعل معاها، تبعت داتا،
 * وتشوف الريسبونس، وكأنك شغال على Postman بس من جوه المتصفح.
*/


/*
    هان بنبني نسخة من التطبيق بعد ما أضفنا كل الإعدادات والخدمات
    يعني كأنك بتقول للـ builder "خلص إعدادك وطلعلي الأبلكيشن جاهز"   
    الـ app اللي طلع من هنا نوعه WebApplication
    وبيحمل كل الكونفيجريشن اللي عملناها فوق
*/
var app = builder.Build();
// بعد ما خلصنا نضيف السيرفيسز
// وبنينا الـ builder، بنستخدم
// Build علشان نطلع نسخة جاهزة
// من الويب أبلكيشن اللي جهزناه


/*
 الشرط هادا بيشيك إذا احنا شغالين في بيئة التطوير (مش نشر حقيقي)
 لو فعلاً احنا في التطوير، بنفعل الـ Swagger والـ UI تبعو
 سواجر هو أداة بتعرضلك توثيق للـ APIs بطريقة تفاعلية
 الهدف منها إنك تجرب الـ APIs بسهولة وتشوف تفاصيلها

 الميدل وير اللي تحت UseSwagger و UseSwaggerUI بيمر عليه كل ريكويست
 يعني كل طلب بيدخل أو بيطلع من التطبيق لازم يعدي من خلالهم
 الميدل وير هنا ممكن يعدل في الريكويست أو حتى يمنعه يوصل
 بس خد بالك، سواجر بنفعله فقط في التطوير، مش في البرودكشن علشان الأمان
 لأنه لو اتفعل على النت، أي حد ممكن يشوف كل تفاصيل الـ APIs
*/
if (app.Environment.IsDevelopment())
{
    // هان بنتأكد إذا احنا شغالين
    // في بيئة تطوير مش نشر نهائي
    // يعني لسه بنجرب وبنختبر
    // مش شغالين على السيرفر الحقيقي

    app.UseSwagger();
    // لو بيئة تطوير، بنشغل الـ Swagger
    // علشان نقدر نعمل توثيق للـ API
    // ونتفاعل معاه عن طريق واجهة رسومية
    // من المتصفح مباشرة

    app.UseSwaggerUI();
    // هان بنشغل واجهة المستخدم
    // الخاصة بالـ Swagger
    // اللي بتخلينا نبعت طلبات
    // ونشوف النتائج بدون كود
}


/*
   بضيف هنا الميدل وير المسؤول
   عن تحويل الريكويست للـ HTTPS
   لو كان جاي عن طريق HTTP
*/
/*
  هان بنضيف ميدل وير بيحول أي طلب جاي بـ HTTP لـ HTTPS
 وHTTPS يعني نسخة مشفرة وآمنة من HTTP
 الهدف منها حماية الريكويست والريسبونس من أي اختراق أو تجسس
 وهاي خطوة مهمة جدًا خاصة في التطبيقات اللي بتتعامل مع بيانات حساسة
*/
app.UseHttpsRedirection();
/* 
 هاد السطر بيخلي أي طلب يجي من متصفح عادي (HTTP)
يتحول تلقائيًا لـ HTTPS (الآمن).
بتضمن إن التطبيق يشتغل بطريقه آمنة.
*/


/*
 هان بنضيف ميدل وير المسؤول عن الصلاحيات
 يعني لو في كنترولر عليه [Authorize]، بتشيك إذا المستخدم مسموحله
 بنوقف "الحارس" على البوابة، لكن لسه ما أعطيناه التعليمات
 التعليمات بتكون من خلال إعدادات الهوية (Identity) أو الـ Policy لاحقًا
*/
// هان بنفعل صلاحيات الوصول
// يعني لما يكون في حاجة محمية
// ومحتاجين نتحقق من الهوية
app.UseAuthorization();
/*
 بيفعل نظام التحقق من الصلاحيات (Authorization)،
يعني لما يكون في كنترولر أو أكشن عليه [Authorize]،
 يتم التحقق إذا المستخدم مسموحله يوصل ولا لا.
 */


/*
 هان التطبيق بيلف على كل الكنترولرز اللي كتبناهم
 وياخد كل الأكشنز(الميثودات) اللي فيهم ويشبكها على الرابط المناسب
 يعني كل أكشن له URL معين بيتسجل في راوت تيبل
 والراوت تيبل هو المسؤول عن توجيه الطلبات للكنترولر المناسب
*/
// هان بنربط الروتينغ
// مع الكنترولرز اللي أضفناهم
// فوق في AddControllers
// عشان يبدأوا يستقبلوا الطلبات
app.MapControllers();
/*
 بيشغل الروتينغ الخاص بالكنترولرز اللي كتبناهم في المشروع،
وبيخلي التطبيق يربط بين الروابط (URLs) والأكشنز اللي داخل الكنترولرز.
*/



/*
 السطر الأخير هاد هو اللي بيشغل التطبيق فعليًا
 من اللحظة هادي، التطبيق بيبدأ يسمع على البورت ويستقبل الريكويستات
 وبيضل واقف عند السطر هادا، يعني ما بيكمل أي كود بعده
 لحد ما تطفي التطبيق، وقتها بيكمل أي حاجة بعدها (لو في)
*/
// وأخيراً، بنشغل التطبيق
// يعني يلا روح يا تطبيق
// وابدأ استقبل الطلبات من العالم
app.Run();
// بيبدأ تشغيل التطبيق فعليًا.
// من اللحظة هادي، التطبيق بيسمع على البورت،
// وبيبلش يستقبل الطلبات.