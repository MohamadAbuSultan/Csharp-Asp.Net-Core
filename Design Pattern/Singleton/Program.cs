using System;

class Program
{
    static void Main(string[] args)
    {
        while (true)
        {
            Console.Write("Enter base currency: ");
            var baseCurrency = Console.ReadLine();

            Console.Write("Enter target currency: ");
            var targetCurrency = Console.ReadLine();

            Console.Write("Enter amount: ");
            var amount = decimal.Parse(Console.ReadLine());

            // var converter = new CurrencyConverter();
            
            /*
            هنا بدل ما نعمل new CurrencyConverter كل مرة
            صرنا نستدعي النسخة الوحيدة الجاهزة 
            باستخدام CurrencyConverter.Instance
            وننادي منها الـ Convert مباشرة
            وهذا اللي بيخلي الأداء أحسن وأسرع
            */
            var exchangedAmount = CurrencyConverter.Instance.Convert(baseCurrency, targetCurrency, amount);

            Console.WriteLine($"Amount: {amount} {baseCurrency} = {exchangedAmount} {targetCurrency}");
        }
    }
}

// -----------------------
/* *** أول اشي: ايش يعني سنجلتون؟ ***
*  السنجلتون هو نمط إنشاء كلاس بنستعمله
*  عشان نضمن إنه ما يكون فيه
*  أكتر من نسخة من الكلاس أثناء ما البرنامج شغال
*  يعني لما ينادي حد الكلاس، دائماً
*  يرجعله نفس النسخة، ما بعمل نسخة جديدة كل مرة
*/

// -----------------------
/* طيب امتى بنحتاج السنجلتون؟
*  بنحتاجه عادةً لما نتعامل مع بيانات ثابتة
*  أو شبه ثابتة (زي الكونفجريشنات أو إعدادات البرنامج)
*  أو مثلا لو في داتا بنقراها 
*  مرة وحدة ونضل نستعملها طول ما التطبيق فاتح
*  مثلاً الكونفجريشن فايل (زي JSON أو XML) بنقراه مرة وحدة 
*  وقت تشغيل التطبيق وخلص
*/

// -----------------------
/* مثال على السنجلتون:
*  لو عندنا ملف كونفجريشن، بنقراه وقت
*  الستارت أب ونخزن بياناته بالكاش، وكل مرة نحتاج 
*  اشي من الكونفجريشن نروح للكاش مش نرجع نفتح الملف
*/

// -----------------------
/* مثال تاني:
* لو عندك لوك أب داتا
* (زي مثلا جدول فيه أسماء الدول والكود تبع كل عملة)
* ، بدل ما كل مرة نقرأ من الداتابيز، بنقرأها مرة
* ونخزنها بالكاش ونستعملها طول ما البرنامج شغال
*/

// -----------------------
/* كيف بنبني كلاس سنجلتون؟
* أول اشي: بنخلي الكونستركتور 
* Private، عشان ما حدا يقدر يعمل New للكلاس برا
* تاني اشي: بنعمل static variable من نفس نوع الكلاس،
* عشان نخزن فيه النسخة الوحيدة
*/

// -----------------------
/* بعدين:
* بنعمل Property اسمها Instance أو Getter Static
* جواتها:
* - بنشيك إذا النسخة = null
* - لو null بنعمل new للنسخة 
* - (مع Lock لو بدنا نحميها من مشاكل المالتي ثريدنج)
* - بعدها بنرجع النسخة
*/

// -----------------------
/* طيب ليش بنعمل Lock؟
* عشان لو أكتر من Thread بنفس اللحظة حاول يعمل 
* Instance جديد، ما يعملولنا مشاكل ويعملوا أكتر من نسخة بالغلط
* فالـ Lock بيضمن إنه بس Thread واحد هو اللي 
* يعمل النسخة والباقي يستنى
*/

// -----------------------
/* عندنا طريقتين لتهيئة الـ Instance:
* 1) Eager Initialization (تهيئة مباشرة): 
* نعمل new instance وقت تعريف المتغير
* كويس لما الكلاس بسيط وما بياخد موارد كتير
* 2) Lazy Initialization (تهيئة عند الطلب): 
* نأجل عمل النسخة لأول مرة ينطلب فيها
*/

// -----------------------
/* لو التطبيق بيتعامل مع داتا تقيلة
-- أو الكلاس حجمه كبير، بنفضل Lazy Initialization
-- مع Double Check Locking
* يعني:
* - أول اشي نعمل if(instance == null)
* - بعدين نعمل lock
* - جوه ال lock نرجع نعمل if(instance == null)
* كمان مرة وننشي النسخة
* هيك منكون ضمنا أعلى مستوى أمان وأداء
*/

// -----------------------
/* طب لما طبقنا السنجلتون على كلاس CurrencyConverter:
*  - أول مرة اليوزر يطلب تحويل 
* عملة بياخد شوية وقت لأنه بيعمل تحميل للبيانات
*  - بعدين أي طلبات تانية
* بتكون سريعة لأنه خلص البيانات متخزنة بالكاش
*/

// -----------------------
/* ملاحظة:
* فيه ناس بتقول ليه ما نخلي الكلاس كله static؟
* الجواب: السنجلتون بيسمحلك تطبق مبادئ 
* البرمجة الكائنية زي Inheritance، Interfaces، Polymorphism
* أما الكلاسات الستاتيك ما بتدعم الحركات هاي
*/

// -----------------------
/* خلاصة الكلام:
* - سنجلتون ممتاز للداتا الثابتة أو شبه الثابتة
* - بيوفر علينا موارد ومشاكل مالتي ثريدنج
* - بس لازم ننتبه لطريقة الإنشاء حسب الحاجة (Eager vs Lazy)
*/